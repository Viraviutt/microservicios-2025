services:
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - management.endpoints.web.exposure.include=health,info,prometheus
      - management.endpoint.prometheus.enabled=true
    depends_on:
      - order-db
    networks:
      - microservices-network
    deploy:
      replicas: 1

  order-db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=orderdb
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  product-service:
    build: ./product-service
    ports:
      - "8081"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://product-db:27017/productdb
      - SERVER_PORT=8081
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - management.endpoints.web.exposure.include=health,info,prometheus
      - management.endpoint.prometheus.enabled=true
    depends_on:
      - product-db
    networks:
      - microservices-network
    deploy:
      replicas: 1

  product-db:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - product-data:/data/db
    networks:
      - microservices-network

  inventory-service:
    build: ./inventory-service
    ports:
      - "8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://inventory-db:5432/inventorydb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SERVER_PORT=8082
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - management.endpoints.web.exposure.include=health,info,prometheus
      - management.endpoint.prometheus.enabled=true
    depends_on:
      - inventory-db
    networks:
      - microservices-network
    deploy:
      replicas: 1

  inventory-db:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=inventorydb
    volumes:
      - inventory-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  payment-service:
    build: ./payment-service
    ports:
      - "8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://payment-db:5432/paymentdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SERVER_PORT=8083
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - management.endpoints.web.exposure.include=health,info,prometheus
      - management.endpoint.prometheus.enabled=true
    depends_on:
      - payment-db
    networks:
      - microservices-network
    deploy:
      replicas: 1

  payment-db:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=paymentdb
    volumes:
      - payment-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8092-8093:8090"
    environment:
      - SERVER_PORT=8090
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - management.endpoints.web.exposure.include=health,info,prometheus
      - management.endpoint.prometheus.enabled=true
    depends_on:
      - eureka-server
      - order-service
      - product-service
      - inventory-service
      - payment-service
    networks:
      - microservices-network
    deploy:
      replicas: 1

  # PROMETHEUS
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  # GRAFANA
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus

  # LOKI
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - microservices-network

  # PROMTAIL
  promtail:
    image: grafana/promtail:2.9.4
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - microservices-network
    
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-db
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    command: start-dev
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8084:8080"
    depends_on:
      - keycloak-db
    volumes:
      - ./keycloak-realm-export:/opt/keycloak/data/import
    networks:
      - microservices-network

volumes:
  order-data:
  product-data:
  inventory-data:
  payment-data:
  keycloak-data:

networks:
  microservices-network:
    driver: bridge